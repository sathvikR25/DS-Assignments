public class MergeLinkedList {
    // Node class represents each element in the list
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Method to add a node at the end of the list
    public static Node addNode(Node head, int data) {
        Node newNode = new Node(data);
        if (head == null) {
            return newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
            return head;
        }
    }

    // Method to merge two lists
    public static Node mergeLists(Node head1, Node head2) {
        if (head1 == null) return head2;
        if (head2 == null) return head1;

        Node mergedHead;
        if (head1.data <= head2.data) {
            mergedHead = head1;
            mergedHead.next = mergeLists(head1.next, head2);
        } else {
            mergedHead = head2;
            mergedHead.next = mergeLists(head1, head2.next);
        }
        return mergedHead;
    }

    // Method to display the list
    public static void displayList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Node head1 = null;
        head1 = addNode(head1, 1);
        head1 = addNode(head1, 3);
        head1 = addNode(head1, 5);

        Node head2 = null;
        head2 = addNode(head2, 2);
        head2 = addNode(head2, 4);
        head2 = addNode(head2, 6);

        System.out.println("List 1:");
        displayList(head1);

        System.out.println("List 2:");
        displayList(head2);

        Node mergedHead = mergeLists(head1, head2);

        System.out.println("Merged List:");
        displayList(mergedHead);
    }
}
